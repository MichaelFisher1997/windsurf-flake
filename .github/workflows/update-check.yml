name: Check for Windsurf Updates

on:
  schedule:
    # Run daily at 9:00 UTC
    - cron: '0 9 * * *'
  workflow_dispatch:

jobs:
  check-updates:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Nix
        uses: cachix/install-nix-action@v22
        with:
          nix_path: nixpkgs=channel:nixos-unstable

      - name: Get current version
        id: current
        run: |
          current_version=$(grep -oP 'version = "\K[^"]*' flake.nix)
          echo "version=$current_version" >> $GITHUB_OUTPUT
          echo "Current version: $current_version"

      - name: Get latest Windsurf release info
        id: latest
        run: |
          # Get the latest release from the API endpoint
          response=$(curl -s "https://windsurf-stable.codeiumdata.com/linux-x64/stable/latest")
          
          # Extract version and URL from response
          latest_url=$(echo "$response" | grep -oP 'https://[^"]*Windsurf-linux-x64-\K[0-9]+\.[0-9]+\.[0-9]+(?=\.tar\.gz)' | head -1)
          latest_version=$(echo "$response" | grep -oP 'Windsurf-linux-x64-\K[0-9]+\.[0-9]+\.[0-9]+' | head -1)
          
          if [ -z "$latest_version" ]; then
            # Fallback: try to parse from a known pattern
            echo "Could not determine latest version from API"
            exit 1
          fi
          
          echo "version=$latest_version" >> $GITHUB_OUTPUT
          echo "url=https://windsurf-stable.codeiumdata.com/linux-x64/stable/latest/Windsurf-linux-x64-$latest_version.tar.gz" >> $GITHUB_OUTPUT
          echo "Latest version: $latest_version"

      - name: Compare versions
        id: compare
        run: |
          current="${{ steps.current.outputs.version }}"
          latest="${{ steps.latest.outputs.version }}"
          
          if [ "$current" = "$latest_version" ]; then
            echo "update_needed=false" >> $GITHUB_OUTPUT
            echo "No update needed. Current version ($current) is latest."
          else
            echo "update_needed=true" >> $GITHUB_OUTPUT
            echo "Update needed! Current: $current, Latest: $latest"
          fi

      - name: Update flake.nix if needed
        if: steps.compare.outputs.update_needed == 'true'
        run: |
          latest_version="${{ steps.latest.outputs.version }}"
          latest_url="${{ steps.latest.outputs.url }}"
          
          # Update version and URL in flake.nix
          sed -i "s/version = \"[^\"]*\"/version = \"$latest_version\"/" flake.nix
          sed -i "s|url = \"[^\"]*\"|url = \"$latest_url\"|" flake.nix
          
          # Clear the hash to let Nix calculate it
          sed -i 's/sha256 = "[^"]*"/sha256 = ""/' flake.nix
          
          echo "Updated flake.nix to version $latest_version"

      - name: Get correct hash
        if: steps.compare.outputs.update_needed == 'true'
        run: |
          # Try to build to get the correct hash
          nix build 2>&1 | grep "got:" | grep -oP 'sha256-\K[^=]+' > hash.txt
          
          if [ -s hash.txt ]; then
            correct_hash=$(cat hash.txt)
            sed -i "s/sha256 = \"\"/sha256 = \"$correct_hash\"/" flake.nix
            echo "Updated hash to: $correct_hash"
          else
            echo "Failed to get correct hash"
            exit 1
          fi

      - name: Verify build
        if: steps.compare.outputs.update_needed == 'true'
        run: |
          nix build

      - name: Create Pull Request
        if: steps.compare.outputs.update_needed == 'true'
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "UPDATE: ${{ steps.latest.outputs.version }}"
          title: "Update Windsurf to ${{ steps.latest.outputs.version }}"
          body: |
            Automated update to Windsurf version ${{ steps.latest.outputs.version }}
            
            **Changes:**
            - Updated version from ${{ steps.current.outputs.version }} to ${{ steps.latest.outputs.version }}
            - Updated download URL
            - Updated package hash
            
            This PR was created automatically by the daily update check workflow.
          branch: update-windsurf-${{ steps.latest.outputs.version }}
          delete-branch: true